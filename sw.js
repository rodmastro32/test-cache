try{self["workbox:core:7.2.0"]&&_()}catch{}const E=(a,...e)=>{let t=a;return e.length>0&&(t+=` :: ${JSON.stringify(e)}`),t},I=E;class l extends Error{constructor(e,t){const s=I(e,t);super(s),this.name=e,this.details=t}}const O=new Set,f={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:typeof registration<"u"?registration.scope:""},U=a=>[f.prefix,a,f.suffix].filter(e=>e&&e.length>0).join("-"),M=a=>{for(const e of Object.keys(f))a(e)},C={updateDetails:a=>{M(e=>{typeof a[e]=="string"&&(f[e]=a[e])})},getGoogleAnalyticsName:a=>a||U(f.googleAnalytics),getPrecacheName:a=>a||U(f.precache),getPrefix:()=>f.prefix,getRuntimeName:a=>a||U(f.runtime),getSuffix:()=>f.suffix};function P(a,e){const t=new URL(a);for(const s of e)t.searchParams.delete(s);return t.href}async function A(a,e,t,s){const r=P(e.url,t);if(e.url===r)return a.match(e,s);const c=Object.assign(Object.assign({},s),{ignoreSearch:!0}),n=await a.keys(e,c);for(const o of n){const i=P(o.url,t);if(r===i)return a.match(o,s)}}let p;function q(){if(p===void 0){const a=new Response("");if("body"in a)try{new Response(a.body),p=!0}catch{p=!1}p=!1}return p}class D{constructor(){this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t})}}async function F(){for(const a of O)await a()}const z=a=>new URL(String(a),location.href).href.replace(new RegExp(`^${location.origin}`),"");function j(a){return new Promise(e=>setTimeout(e,a))}function S(a,e){const t=e();return a.waitUntil(t),t}async function H(a,e){let t=null;if(a.url&&(t=new URL(a.url).origin),t!==self.location.origin)throw new l("cross-origin-copy-response",{origin:t});const s=a.clone(),c={headers:new Headers(s.headers),status:s.status,statusText:s.statusText},n=q()?s.body:await s.blob();return new Response(n,c)}function B(){self.addEventListener("activate",()=>self.clients.claim())}try{self["workbox:precaching:7.2.0"]&&_()}catch{}const G="__WB_REVISION__";function $(a){if(!a)throw new l("add-to-cache-list-unexpected-type",{entry:a});if(typeof a=="string"){const c=new URL(a,location.href);return{cacheKey:c.href,url:c.href}}const{revision:e,url:t}=a;if(!t)throw new l("add-to-cache-list-unexpected-type",{entry:a});if(!e){const c=new URL(t,location.href);return{cacheKey:c.href,url:c.href}}const s=new URL(t,location.href),r=new URL(t,location.href);return s.searchParams.set(G,e),{cacheKey:s.href,url:r.href}}class V{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:s})=>{if(e.type==="install"&&t&&t.originalRequest&&t.originalRequest instanceof Request){const r=t.originalRequest.url;s?this.notUpdatedURLs.push(r):this.updatedURLs.push(r)}return s}}}class J{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:t,params:s})=>{const r=(s==null?void 0:s.cacheKey)||this._precacheController.getCacheKeyForURL(t.url);return r?new Request(r,{headers:t.headers}):t},this._precacheController=e}}try{self["workbox:strategies:7.2.0"]&&_()}catch{}function R(a){return typeof a=="string"?new Request(a):a}class Q{constructor(e,t){this._cacheKeys={},Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new D,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const s of this._plugins)this._pluginStateMap.set(s,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let s=R(e);if(s.mode==="navigate"&&t instanceof FetchEvent&&t.preloadResponse){const n=await t.preloadResponse;if(n)return n}const r=this.hasCallback("fetchDidFail")?s.clone():null;try{for(const n of this.iterateCallbacks("requestWillFetch"))s=await n({request:s.clone(),event:t})}catch(n){if(n instanceof Error)throw new l("plugin-error-request-will-fetch",{thrownErrorMessage:n.message})}const c=s.clone();try{let n;n=await fetch(s,s.mode==="navigate"?void 0:this._strategy.fetchOptions);for(const o of this.iterateCallbacks("fetchDidSucceed"))n=await o({event:t,request:c,response:n});return n}catch(n){throw r&&await this.runCallbacks("fetchDidFail",{error:n,event:t,originalRequest:r.clone(),request:c.clone()}),n}}async fetchAndCachePut(e){const t=await this.fetch(e),s=t.clone();return this.waitUntil(this.cachePut(e,s)),t}async cacheMatch(e){const t=R(e);let s;const{cacheName:r,matchOptions:c}=this._strategy,n=await this.getCacheKey(t,"read"),o=Object.assign(Object.assign({},c),{cacheName:r});s=await caches.match(n,o);for(const i of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await i({cacheName:r,matchOptions:c,cachedResponse:s,request:n,event:this.event})||void 0;return s}async cachePut(e,t){const s=R(e);await j(0);const r=await this.getCacheKey(s,"write");if(!t)throw new l("cache-put-with-no-response",{url:z(r.url)});const c=await this._ensureResponseSafeToCache(t);if(!c)return!1;const{cacheName:n,matchOptions:o}=this._strategy,i=await self.caches.open(n),h=this.hasCallback("cacheDidUpdate"),g=h?await A(i,r.clone(),["__WB_REVISION__"],o):null;try{await i.put(r,h?c.clone():c)}catch(u){if(u instanceof Error)throw u.name==="QuotaExceededError"&&await F(),u}for(const u of this.iterateCallbacks("cacheDidUpdate"))await u({cacheName:n,oldResponse:g,newResponse:c.clone(),request:r,event:this.event});return!0}async getCacheKey(e,t){const s=`${e.url} | ${t}`;if(!this._cacheKeys[s]){let r=e;for(const c of this.iterateCallbacks("cacheKeyWillBeUsed"))r=R(await c({mode:t,request:r,event:this.event,params:this.params}));this._cacheKeys[s]=r}return this._cacheKeys[s]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const s of this.iterateCallbacks(e))await s(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if(typeof t[e]=="function"){const s=this._pluginStateMap.get(t);yield c=>{const n=Object.assign(Object.assign({},c),{state:s});return t[e](n)}}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,s=!1;for(const r of this.iterateCallbacks("cacheWillUpdate"))if(t=await r({request:this.request,response:t,event:this.event})||void 0,s=!0,!t)break;return s||t&&t.status!==200&&(t=void 0),t}}class L{constructor(e={}){this.cacheName=C.getRuntimeName(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,s=typeof e.request=="string"?new Request(e.request):e.request,r="params"in e?e.params:void 0,c=new Q(this,{event:t,request:s,params:r}),n=this._getResponse(c,s,t),o=this._awaitComplete(n,c,s,t);return[n,o]}async _getResponse(e,t,s){await e.runCallbacks("handlerWillStart",{event:s,request:t});let r;try{if(r=await this._handle(t,e),!r||r.type==="error")throw new l("no-response",{url:t.url})}catch(c){if(c instanceof Error){for(const n of e.iterateCallbacks("handlerDidError"))if(r=await n({error:c,event:s,request:t}),r)break}if(!r)throw c}for(const c of e.iterateCallbacks("handlerWillRespond"))r=await c({event:s,request:t,response:r});return r}async _awaitComplete(e,t,s,r){let c,n;try{c=await e}catch{}try{await t.runCallbacks("handlerDidRespond",{event:r,request:s,response:c}),await t.doneWaiting()}catch(o){o instanceof Error&&(n=o)}if(await t.runCallbacks("handlerDidComplete",{event:r,request:s,response:c,error:n}),t.destroy(),n)throw n}}class d extends L{constructor(e={}){e.cacheName=C.getPrecacheName(e.cacheName),super(e),this._fallbackToNetwork=e.fallbackToNetwork!==!1,this.plugins.push(d.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const s=await t.cacheMatch(e);return s||(t.event&&t.event.type==="install"?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,t){let s;const r=t.params||{};if(this._fallbackToNetwork){const c=r.integrity,n=e.integrity,o=!n||n===c;s=await t.fetch(new Request(e,{integrity:e.mode!=="no-cors"?n||c:void 0})),c&&o&&e.mode!=="no-cors"&&(this._useDefaultCacheabilityPluginIfNeeded(),await t.cachePut(e,s.clone()))}else throw new l("missing-precache-entry",{cacheName:this.cacheName,url:e.url});return s}async _handleInstall(e,t){this._useDefaultCacheabilityPluginIfNeeded();const s=await t.fetch(e);if(!await t.cachePut(e,s.clone()))throw new l("bad-precaching-response",{url:e.url,status:s.status});return s}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[s,r]of this.plugins.entries())r!==d.copyRedirectedCacheableResponsesPlugin&&(r===d.defaultPrecacheCacheabilityPlugin&&(e=s),r.cacheWillUpdate&&t++);t===0?this.plugins.push(d.defaultPrecacheCacheabilityPlugin):t>1&&e!==null&&this.plugins.splice(e,1)}}d.defaultPrecacheCacheabilityPlugin={async cacheWillUpdate({response:a}){return!a||a.status>=400?null:a}};d.copyRedirectedCacheableResponsesPlugin={async cacheWillUpdate({response:a}){return a.redirected?await H(a):a}};class X{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:s=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new d({cacheName:C.getPrecacheName(e),plugins:[...t,new J({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){const t=[];for(const s of e){typeof s=="string"?t.push(s):s&&s.revision===void 0&&t.push(s.url);const{cacheKey:r,url:c}=$(s),n=typeof s!="string"&&s.revision?"reload":"default";if(this._urlsToCacheKeys.has(c)&&this._urlsToCacheKeys.get(c)!==r)throw new l("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(c),secondEntry:r});if(typeof s!="string"&&s.integrity){if(this._cacheKeysToIntegrities.has(r)&&this._cacheKeysToIntegrities.get(r)!==s.integrity)throw new l("add-to-cache-list-conflicting-integrities",{url:c});this._cacheKeysToIntegrities.set(r,s.integrity)}if(this._urlsToCacheKeys.set(c,r),this._urlsToCacheModes.set(c,n),t.length>0){const o=`Workbox is precaching URLs without revision info: ${t.join(", ")}
This is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(o)}}}install(e){return S(e,async()=>{const t=new V;this.strategy.plugins.push(t);for(const[c,n]of this._urlsToCacheKeys){const o=this._cacheKeysToIntegrities.get(n),i=this._urlsToCacheModes.get(c),h=new Request(c,{integrity:o,cache:i,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:n},request:h,event:e}))}const{updatedURLs:s,notUpdatedURLs:r}=t;return{updatedURLs:s,notUpdatedURLs:r}})}activate(e){return S(e,async()=>{const t=await self.caches.open(this.strategy.cacheName),s=await t.keys(),r=new Set(this._urlsToCacheKeys.values()),c=[];for(const n of s)r.has(n.url)||(await t.delete(n),c.push(n.url));return{deletedURLs:c}})}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,s=this.getCacheKeyForURL(t);if(s)return(await self.caches.open(this.strategy.cacheName)).match(s)}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new l("non-precached-url",{url:e});return s=>(s.request=new Request(e),s.params=Object.assign({cacheKey:t},s.params),this.strategy.handle(s))}}let v;const W=()=>(v||(v=new X),v);try{self["workbox:routing:7.2.0"]&&_()}catch{}const K="GET",b=a=>a&&typeof a=="object"?a:{handle:a};class w{constructor(e,t,s=K){this.handler=b(t),this.match=e,this.method=s}setCatchHandler(e){this.catchHandler=b(e)}}class Y extends w{constructor(e,t,s){const r=({url:c})=>{const n=e.exec(c.href);if(n&&!(c.origin!==location.origin&&n.index!==0))return n.slice(1)};super(r,t,s)}}class Z{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:t}=e,s=this.handleRequest({request:t,event:e});s&&e.respondWith(s)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&e.data.type==="CACHE_URLS"){const{payload:t}=e.data,s=Promise.all(t.urlsToCache.map(r=>{typeof r=="string"&&(r=[r]);const c=new Request(...r);return this.handleRequest({request:c,event:e})}));e.waitUntil(s),e.ports&&e.ports[0]&&s.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:t}){const s=new URL(e.url,location.href);if(!s.protocol.startsWith("http"))return;const r=s.origin===location.origin,{params:c,route:n}=this.findMatchingRoute({event:t,request:e,sameOrigin:r,url:s});let o=n&&n.handler;const i=e.method;if(!o&&this._defaultHandlerMap.has(i)&&(o=this._defaultHandlerMap.get(i)),!o)return;let h;try{h=o.handle({url:s,request:e,event:t,params:c})}catch(u){h=Promise.reject(u)}const g=n&&n.catchHandler;return h instanceof Promise&&(this._catchHandler||g)&&(h=h.catch(async u=>{if(g)try{return await g.handle({url:s,request:e,event:t,params:c})}catch(x){x instanceof Error&&(u=x)}if(this._catchHandler)return this._catchHandler.handle({url:s,request:e,event:t});throw u})),h}findMatchingRoute({url:e,sameOrigin:t,request:s,event:r}){const c=this._routes.get(s.method)||[];for(const n of c){let o;const i=n.match({url:e,sameOrigin:t,request:s,event:r});if(i)return o=i,(Array.isArray(o)&&o.length===0||i.constructor===Object&&Object.keys(i).length===0||typeof i=="boolean")&&(o=void 0),{route:n,params:o}}return{}}setDefaultHandler(e,t=K){this._defaultHandlerMap.set(t,b(e))}setCatchHandler(e){this._catchHandler=b(e)}registerRoute(e){this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new l("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(t>-1)this._routes.get(e.method).splice(t,1);else throw new l("unregister-route-route-not-registered")}}let y;const ee=()=>(y||(y=new Z,y.addFetchListener(),y.addCacheListener()),y);function m(a,e,t){let s;if(typeof a=="string"){const c=new URL(a,location.href),n=({url:o})=>o.href===c.href;s=new w(n,e,t)}else if(a instanceof RegExp)s=new Y(a,e,t);else if(typeof a=="function")s=new w(a,e,t);else if(a instanceof w)s=a;else throw new l("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});return ee().registerRoute(s),s}function te(a,e=[]){for(const t of[...a.searchParams.keys()])e.some(s=>s.test(t))&&a.searchParams.delete(t);return a}function*se(a,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:t="index.html",cleanURLs:s=!0,urlManipulation:r}={}){const c=new URL(a,location.href);c.hash="",yield c.href;const n=te(c,e);if(yield n.href,t&&n.pathname.endsWith("/")){const o=new URL(n.href);o.pathname+=t,yield o.href}if(s){const o=new URL(n.href);o.pathname+=".html",yield o.href}if(r){const o=r({url:c});for(const i of o)yield i.href}}class ae extends w{constructor(e,t){const s=({request:r})=>{const c=e.getURLsToCacheKeys();for(const n of se(r.url,t)){const o=c.get(n);if(o){const i=e.getIntegrityForCacheKey(o);return{cacheKey:o,integrity:i}}}};super(s,e.strategy)}}function re(a){const e=W(),t=new ae(e,a);m(t)}const ce="-precache-",ne=async(a,e=ce)=>{const s=(await self.caches.keys()).filter(r=>r.includes(e)&&r.includes(self.registration.scope)&&r!==a);return await Promise.all(s.map(r=>self.caches.delete(r))),s};function oe(){self.addEventListener("activate",a=>{const e=C.getPrecacheName();a.waitUntil(ne(e).then(t=>{}))})}function ie(a){W().precache(a)}function le(a,e){ie(a),re(e)}class he extends L{async _handle(e,t){let s=await t.cacheMatch(e),r;if(!s)try{s=await t.fetchAndCachePut(e)}catch(c){c instanceof Error&&(r=c)}if(!s)throw new l("no-response",{url:e.url,error:r});return s}}const ue={cacheWillUpdate:async({response:a})=>a.status===200||a.status===0?a:null};class fe extends L{constructor(e={}){super(e),this.plugins.some(t=>"cacheWillUpdate"in t)||this.plugins.unshift(ue)}async _handle(e,t){const s=t.fetchAndCachePut(e).catch(()=>{});t.waitUntil(s);let r=await t.cacheMatch(e),c;if(!r)try{r=await s}catch(n){n instanceof Error&&(c=n)}if(!r)throw new l("no-response",{url:e.url,error:c});return r}}try{self["workbox:cacheable-response:7.2.0"]&&_()}catch{}class de{constructor(e={}){this._statuses=e.statuses,this._headers=e.headers}isResponseCacheable(e){let t=!0;return this._statuses&&(t=this._statuses.includes(e.status)),this._headers&&t&&(t=Object.keys(this._headers).some(s=>e.headers.get(s)===this._headers[s])),t}}class N{constructor(e){this.cacheWillUpdate=async({response:t})=>this._cacheableResponse.isResponseCacheable(t)?t:null,this._cacheableResponse=new de(e)}}let k=null;console.log("%c Service Worker Starting ⚙️","background: #222; color: #bada55; font-size: 20px; padding: 10px;");self.skipWaiting();B();oe();le([{"revision":null,"url":"assets/index-BcSdpi7e.js"},{"revision":null,"url":"assets/index-Dg8jL3ag.css"},{"revision":"c01872952172836c63368582b82c4cfc","url":"index.html"},{"revision":"aa2f326aabefc80cdabe0a59f772a175","url":"manifest.webmanifest"}]);self.clients.matchAll().then(a=>{console.log("%c Service Worker: Found clients:","background: #222; color: #bada55; font-size: 16px;",a.length),a.forEach(e=>{e.postMessage({type:"GET_SW_PARAMS"})})});console.log("%c Service Worker: Initialization complete ✅","background: #222; color: #bada55; font-size: 16px;");self.addEventListener("fetch",a=>{console.log("%c Service Worker: Intercepted request:","background: #222; color: #bada55; font-size: 16px;",{url:a.request.url,method:a.request.method,mode:a.request.mode,destination:a.request.destination,headers:Object.fromEntries(a.request.headers.entries())})});const T=async({request:a,url:e})=>{console.log("%c Service Worker: Handling request for:","background: #222; color: #bada55; font-size: 16px;",{url:e.toString(),method:a.method,mode:a.mode,destination:a.destination,webviewPath:k});const t="js-css-cache";console.log("%c Service Worker: Opening cache:","background: #222; color: #bada55; font-size: 16px;",t);const s=await caches.open(t),r=await s.match(a);console.log("%c Service Worker: Cache match result:","background: #222; color: #bada55; font-size: 16px;",r?"Found":"Not found"),console.log("%c Service Worker: Starting network request","background: #222; color: #bada55; font-size: 16px;");const c=fetch(a).then(n=>{console.log("%c Service Worker: Network request successful","background: #222; color: #bada55; font-size: 16px;");const o=n.clone();return s.put(a,o),console.log("%c Service Worker: Updated cache with new response","background: #222; color: #bada55; font-size: 16px;"),n}).catch(n=>{if(console.error("%c Service Worker: Network request failed:","background: #222; color: #ff4444; font-size: 16px;",n),!r)throw n;return console.log("%c Service Worker: Falling back to cached response","background: #222; color: #bada55; font-size: 16px;"),r});return r?(console.log("%c Service Worker: Returning cached response immediately","background: #222; color: #bada55; font-size: 16px;"),c.catch(()=>console.log("%c Service Worker: Background cache update failed","background: #222; color: #ff4444; font-size: 16px;")),r):(console.log("%c Service Worker: No cache found, waiting for network response","background: #222; color: #bada55; font-size: 16px;"),c)};m(({request:a})=>a.destination==="script",T);console.log("%c Service Worker: Registered route for script files","background: #222; color: #bada55; font-size: 16px;");m(({request:a})=>a.destination==="style",T);console.log("%c Service Worker: Registered route for style files",k,"background: #222; color: #bada55; font-size: 16px;");m(({request:a})=>a.destination==="image",new he({cacheName:"images-cache",plugins:[new N({statuses:[0,200]})]}));console.log("%c Service Worker: Registered route for image files","background: #222; color: #bada55; font-size: 16px;");m(({request:a})=>a.mode==="navigate",new fe({cacheName:"pages-cache",plugins:[new N({statuses:[0,200]})]}));console.log("%c Service Worker: Registered route for navigation requests","background: #222; color: #bada55; font-size: 16px;");self.addEventListener("install",()=>{const e=new URL(self.location.href).searchParams.get("_param");e&&(k=decodeURIComponent(e),console.log("%c Service Worker: Initial path from URL:","background: #222; color: #bada55; font-size: 16px;",k))});self.addEventListener("message",a=>{console.log("%c Service Worker: Received message:","background: #222; color: #bada55; font-size: 16px;",a.data),a.data&&a.data.type==="SKIP_WAITING"&&(console.log("%c Service Worker: Skipping waiting","background: #222; color: #bada55; font-size: 16px;"),self.skipWaiting())});
